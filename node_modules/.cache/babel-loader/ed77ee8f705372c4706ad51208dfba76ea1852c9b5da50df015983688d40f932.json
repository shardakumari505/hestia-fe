{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\t-shakumari\\\\hestia\\\\src\\\\screens\\\\fleet-screen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './fleet-screen.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cluster = _ref => {\n  let {\n    id,\n    name,\n    onDragStart\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cluster\",\n    draggable: true,\n    onDragStart: e => onDragStart(e, id),\n    children: name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n_c = Cluster;\nconst FleetScreen = () => {\n  _s();\n  const [clusters, setClusters] = useState([{\n    id: 1,\n    name: \"Cluster Name 1\"\n  }, {\n    id: 2,\n    name: \"Cluster Name 2\"\n  }, {\n    id: 3,\n    name: \"Cluster Name 3\"\n  }, {\n    id: 4,\n    name: \"Cluster Name 4\"\n  }, {\n    id: 5,\n    name: \"Cluster Name 5\"\n  }]);\n  const [droppedItems, setDroppedItems] = useState([]);\n  const handleDragStart = (event, itemId) => {\n    event.dataTransfer.setData(\"text/plain\", itemId);\n  };\n  const handleDrop = event => {\n    event.preventDefault();\n    const itemId = event.dataTransfer.getData(\"text/plain\");\n    const droppedCluster = clusters.find(cluster => cluster.id.toString() === itemId);\n    if (droppedCluster) {\n      setDroppedItems(prevItems => [...prevItems, droppedCluster]);\n      setClusters(prevClusters => prevClusters.filter(cluster => cluster.id.toString() !== itemId));\n    }\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"move\";\n  };\n  const handleDragEnter = event => {\n    event.preventDefault();\n    event.target.classList.add(\"drag-over\");\n  };\n  const handleDragLeave = event => {\n    event.preventDefault();\n    event.target.classList.remove(\"drag-over\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"drop-container\",\n    onDrop: handleDrop,\n    onDragOver: handleDragOver,\n    onDragEnter: handleDragEnter,\n    onDragLeave: handleDragLeave,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cluster-container\",\n      children: clusters.map(cluster => /*#__PURE__*/_jsxDEV(Cluster, {\n        id: cluster.id.toString(),\n        name: cluster.name,\n        onDragStart: handleDragStart\n      }, cluster.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropped-items\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Dropped Items\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: droppedItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: item.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(FleetScreen, \"bM/JvLj1ZLlPcQjNBS1N3AIwWWk=\");\n_c2 = FleetScreen;\nexport default FleetScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"Cluster\");\n$RefreshReg$(_c2, \"FleetScreen\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Cluster","_ref","id","name","onDragStart","className","draggable","e","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","FleetScreen","_s","clusters","setClusters","droppedItems","setDroppedItems","handleDragStart","event","itemId","dataTransfer","setData","handleDrop","preventDefault","getData","droppedCluster","find","cluster","toString","prevItems","prevClusters","filter","handleDragOver","dropEffect","handleDragEnter","target","classList","add","handleDragLeave","remove","onDrop","onDragOver","onDragEnter","onDragLeave","map","item","index","_c2","$RefreshReg$"],"sources":["C:/Users/t-shakumari/hestia/src/screens/fleet-screen.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport './fleet-screen.scss'\r\n\r\nconst Cluster = ({ id, name, onDragStart }) => {\r\n  return (\r\n    <div className=\"cluster\" draggable onDragStart={(e) => onDragStart(e, id)}>\r\n      {name}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FleetScreen = () => {\r\n  const [clusters, setClusters] = useState([\r\n    { id: 1, name: \"Cluster Name 1\" },\r\n    { id: 2, name: \"Cluster Name 2\" },\r\n    { id: 3, name: \"Cluster Name 3\" },\r\n    { id: 4, name: \"Cluster Name 4\" },\r\n    { id: 5, name: \"Cluster Name 5\" }\r\n  ]);\r\n\r\n  const [droppedItems, setDroppedItems] = useState([]);\r\n\r\n  const handleDragStart = (event, itemId) => {\r\n    event.dataTransfer.setData(\"text/plain\", itemId);\r\n  };\r\n\r\n  const handleDrop = (event) => {\r\n    event.preventDefault();\r\n    const itemId = event.dataTransfer.getData(\"text/plain\");\r\n    const droppedCluster = clusters.find((cluster) => cluster.id.toString() === itemId);\r\n    \r\n    if (droppedCluster) {\r\n      setDroppedItems((prevItems) => [...prevItems, droppedCluster]);\r\n      setClusters((prevClusters) => prevClusters.filter((cluster) => cluster.id.toString() !== itemId));\r\n    }\r\n  };\r\n\r\n  const handleDragOver = (event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  };\r\n\r\n  const handleDragEnter = (event) => {\r\n    event.preventDefault();\r\n    event.target.classList.add(\"drag-over\");\r\n  };\r\n\r\n  const handleDragLeave = (event) => {\r\n    event.preventDefault();\r\n    event.target.classList.remove(\"drag-over\");\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"drop-container\"\r\n      onDrop={handleDrop}\r\n      onDragOver={handleDragOver}\r\n      onDragEnter={handleDragEnter}\r\n      onDragLeave={handleDragLeave}\r\n    >\r\n      <div className=\"cluster-container\">\r\n        {clusters.map((cluster) => (\r\n          <Cluster\r\n            key={cluster.id}\r\n            id={cluster.id.toString()}\r\n            name={cluster.name}\r\n            onDragStart={handleDragStart}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"dropped-items\">\r\n        <h3>Dropped Items</h3>\r\n        <ul>\r\n          {droppedItems.map((item, index) => (\r\n            <li key={index}>{item.name}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FleetScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}