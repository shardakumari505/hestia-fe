{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\t-shakumari\\\\hestia\\\\src\\\\screens\\\\fleet-screen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from \"react\";\nimport \"./fleet-screen.scss\";\nimport { useDropzone } from \"react-dropzone\";\nimport FileDropzone from \"../components/drag-n-drop/dropzone\";\nimport ShowImage from \"./showImage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FleetScreen = props => {\n  _s();\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach((file, index) => {\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        const newImage = {\n          id: index,\n          src: e.target.result\n        };\n        setImages(prevState => [...prevState, newImage]);\n      };\n      reader.readAsDataURL(file);\n    });\n\n    // Remove the dropped files from ShowImage\n    setImages(prevState => prevState.filter(image => !acceptedFiles.includes(image.src)));\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    multiple: false // Only allow one file to be dropped at a time\n  });\n\n  const images = [{\n    id: 1,\n    src: \"image1.jpg\"\n  }, {\n    id: 2,\n    src: \"image2.jpg\"\n  }, {\n    id: 3,\n    src: \"image3.jpg\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fleet-screen-container\",\n    children: [/*#__PURE__*/_jsxDEV(FileDropzone, {\n      getRootProps: getRootProps,\n      getInputProps: getInputProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ShowImage, {\n      images: images\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(FleetScreen, \"m2/zPeD393EJy9nRT3zys7UD7jw=\", false, function () {\n  return [useDropzone];\n});\n_c = FleetScreen;\nexport default FleetScreen;\nvar _c;\n$RefreshReg$(_c, \"FleetScreen\");","map":{"version":3,"names":["React","useCallback","useState","useDropzone","FileDropzone","ShowImage","jsxDEV","_jsxDEV","FleetScreen","props","_s","onDrop","acceptedFiles","forEach","file","index","reader","FileReader","onload","e","newImage","id","src","target","result","setImages","prevState","readAsDataURL","filter","image","includes","getRootProps","getInputProps","multiple","images","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/t-shakumari/hestia/src/screens/fleet-screen.jsx"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\r\nimport \"./fleet-screen.scss\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport FileDropzone from \"../components/drag-n-drop/dropzone\";\r\nimport ShowImage from \"./showImage\";\r\n\r\nconst FleetScreen = (props) => {\r\n\r\n    const onDrop = useCallback((acceptedFiles) => {\r\n        acceptedFiles.forEach((file, index) => {\r\n            const reader = new FileReader();\r\n            reader.onload = function (e) {\r\n                const newImage = { id: index, src: e.target.result };\r\n                setImages((prevState) => [...prevState, newImage]);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        });\r\n\r\n        // Remove the dropped files from ShowImage\r\n        setImages((prevState) => prevState.filter((image) => !acceptedFiles.includes(image.src)));\r\n    }, []);\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        multiple: false, // Only allow one file to be dropped at a time\r\n    });\r\n    const images = [\r\n        { id: 1, src: \"image1.jpg\" },\r\n        { id: 2, src: \"image2.jpg\" },\r\n        { id: 3, src: \"image3.jpg\" },\r\n      ];\r\n\r\n    return (\r\n        <div className=\"fleet-screen-container\">\r\n            <FileDropzone getRootProps={getRootProps} getInputProps={getInputProps} />\r\n            <ShowImage images={images} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FleetScreen;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AACpD,OAAO,qBAAqB;AAC5B,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAOC,YAAY,MAAM,oCAAoC;AAC7D,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAE3B,MAAMC,MAAM,GAAGV,WAAW,CAAEW,aAAa,IAAK;IAC1CA,aAAa,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MACnC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAG,UAAUC,CAAC,EAAE;QACzB,MAAMC,QAAQ,GAAG;UAAEC,EAAE,EAAEN,KAAK;UAAEO,GAAG,EAAEH,CAAC,CAACI,MAAM,CAACC;QAAO,CAAC;QACpDC,SAAS,CAAEC,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEN,QAAQ,CAAC,CAAC;MACtD,CAAC;MACDJ,MAAM,CAACW,aAAa,CAACb,IAAI,CAAC;IAC9B,CAAC,CAAC;;IAEF;IACAW,SAAS,CAAEC,SAAS,IAAKA,SAAS,CAACE,MAAM,CAAEC,KAAK,IAAK,CAACjB,aAAa,CAACkB,QAAQ,CAACD,KAAK,CAACP,GAAG,CAAC,CAAC,CAAC;EAC7F,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM;IAAES,YAAY;IAAEC;EAAc,CAAC,GAAG7B,WAAW,CAAC;IAChDQ,MAAM;IACNsB,QAAQ,EAAE,KAAK,CAAE;EACrB,CAAC,CAAC;;EACF,MAAMC,MAAM,GAAG,CACX;IAAEb,EAAE,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAa,CAAC,EAC5B;IAAED,EAAE,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAa,CAAC,EAC5B;IAAED,EAAE,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAa,CAAC,CAC7B;EAEH,oBACIf,OAAA;IAAK4B,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACnC7B,OAAA,CAACH,YAAY;MAAC2B,YAAY,EAAEA,YAAa;MAACC,aAAa,EAAEA;IAAc;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1EjC,OAAA,CAACF,SAAS;MAAC6B,MAAM,EAAEA;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEd,CAAC;AAAC9B,EAAA,CAhCIF,WAAW;EAAA,QAgB2BL,WAAW;AAAA;AAAAsC,EAAA,GAhBjDjC,WAAW;AAkCjB,eAAeA,WAAW;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}