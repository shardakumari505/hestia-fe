{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\t-shakumari\\\\hestia\\\\src\\\\screens\\\\fleet-screen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Box, Grid, Paper } from \"@mui/material\";\nimport { experimentalStyled as styled } from \"@mui/material/styles\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cluster = styled(Paper)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    backgroundColor: theme.palette.mode === \"dark\" ? \"#1A2027\" : \"#fff\",\n    ...theme.typography.body2,\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  };\n});\n_c = Cluster;\nconst items = [{\n  id: \"1\",\n  name: \"Item 1\"\n}, {\n  id: \"2\",\n  name: \"Item 2\"\n}, {\n  id: \"3\",\n  name: \"Item 3\"\n}, {\n  id: \"4\",\n  name: \"Item 4\"\n}, {\n  id: \"5\",\n  name: \"Item 5\"\n}];\nconst FleetScreen = () => {\n  _s();\n  const [droppedItems, setDroppedItems] = useState([]);\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) return;\n    if (destination.droppableId === \"droppedItems\") {\n      const item = items.find(item => item.id === result.draggableId);\n      setDroppedItems(prevItems => [...prevItems, item]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"draggableItems\",\n          children: provided => /*#__PURE__*/_jsxDEV(Paper, {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            sx: {\n              height: \"300px\",\n              padding: \"16px\"\n            },\n            children: [items.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: item.id,\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                children: /*#__PURE__*/_jsxDEV(Cluster, {\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 54,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 23\n              }, this)\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 19\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"droppedItems\",\n          children: provided => /*#__PURE__*/_jsxDEV(Paper, {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            sx: {\n              height: \"300px\",\n              padding: \"16px\"\n            },\n            children: [droppedItems.map((item, index) => /*#__PURE__*/_jsxDEV(Cluster, {\n              children: item.name\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(FleetScreen, \"uevDkba0AATDmcDiQsCOl1bV6co=\");\n_c2 = FleetScreen;\nexport default FleetScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"Cluster\");\n$RefreshReg$(_c2, \"FleetScreen\");","map":{"version":3,"names":["React","useState","Box","Grid","Paper","experimentalStyled","styled","DragDropContext","Draggable","Droppable","jsxDEV","_jsxDEV","Cluster","_ref","theme","backgroundColor","palette","mode","typography","body2","padding","spacing","textAlign","color","text","secondary","_c","items","id","name","FleetScreen","_s","droppedItems","setDroppedItems","onDragEnd","result","source","destination","droppableId","item","find","draggableId","prevItems","children","container","xs","provided","ref","innerRef","droppableProps","sx","height","map","index","draggableProps","dragHandleProps","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","_c2","$RefreshReg$"],"sources":["C:/Users/t-shakumari/hestia/src/screens/fleet-screen.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Box, Grid, Paper } from \"@mui/material\";\r\nimport { experimentalStyled as styled } from \"@mui/material/styles\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\n\r\nconst Cluster = styled(Paper)(({ theme }) => ({\r\n  backgroundColor: theme.palette.mode === \"dark\" ? \"#1A2027\" : \"#fff\",\r\n  ...theme.typography.body2,\r\n  padding: theme.spacing(2),\r\n  textAlign: \"center\",\r\n  color: theme.palette.text.secondary,\r\n}));\r\n\r\nconst items = [\r\n  { id: \"1\", name: \"Item 1\" },\r\n  { id: \"2\", name: \"Item 2\" },\r\n  { id: \"3\", name: \"Item 3\" },\r\n  { id: \"4\", name: \"Item 4\" },\r\n  { id: \"5\", name: \"Item 5\" },\r\n];\r\n\r\nconst FleetScreen = () => {\r\n  const [droppedItems, setDroppedItems] = useState([]);\r\n\r\n  const onDragEnd = (result) => {\r\n    const { source, destination } = result;\r\n    if (!destination) return;\r\n\r\n    if (destination.droppableId === \"droppedItems\") {\r\n      const item = items.find((item) => item.id === result.draggableId);\r\n      setDroppedItems((prevItems) => [...prevItems, item]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={6}>\r\n          <Droppable droppableId=\"draggableItems\">\r\n            {(provided) => (\r\n              <Paper\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n                sx={{ height: \"300px\", padding: \"16px\" }}\r\n              >\r\n                {items.map((item, index) => (\r\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                    {(provided) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                      >\r\n                        <Cluster>{item.name}</Cluster>\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </Paper>\r\n            )}\r\n          </Droppable>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Droppable droppableId=\"droppedItems\">\r\n            {(provided) => (\r\n              <Paper\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n                sx={{ height: \"300px\", padding: \"16px\" }}\r\n              >\r\n                {droppedItems.map((item, index) => (\r\n                  <Cluster key={item.id}>{item.name}</Cluster>\r\n                ))}\r\n                {provided.placeholder}\r\n              </Paper>\r\n            )}\r\n          </Droppable>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FleetScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}